export default class Order {
    _key: string;
    _callback: string;
    _cancel: string;
    _complete: string;
    _order_id: string;
    _order_date: any;
    _order_content: any[];
    _card: Card;
    _order_extras: {};
    _currency: string;
    _tax_amount: number;
    _shipping_amount: number;
    _amount: number;
    _category: string;
    _full_name: string;
    _first_name: string;
    _last_name: string;
    _email: string;
    _address: string;
    _address_alt: string;
    _zip: string;
    _city: string;
    _state: string;
    _country: string;
    _note: string;
    _phone: string;
    _cardinal: any;
    _uuid: string;
    json: boolean;
    sdk: boolean;
    cardinal: Cardinal;
    env: string;
    /**
     * Elimina los items agregados con el @method addItem(item)
     *
     */
    _resetContent(): void;
    /**
     * Recalcula el valor de total de la cantidad y e impuestos totales a
     * cobrar si hay items agregados
     *
     */
    _totalize(): void;
    /**
     * Agrega una variante de producto al cobro
     *
     * @param {Item} item models/Item
     */
    addItem(item: Item): void;
    /**
     * Agrega una tarjeta a la orden
     *
     * @param {Card} card
     */
    addCard(card: Card): void;
    /**
     * Agrega información de facturación del cliente
     *
     * @param {Billing} billing
     */
    addBilling(billing: Billing): void;
    /**
     * Agrega un valor extraordinario al cobro
     *
     * @param {string} key Llave del Json
     * @param {string} value Valor de la llave @param key
     */
    addExtra(key: string, value: string): void;
    /**
     * Establece el valor de la orden de la transacción
     *
     * @param {string} order - orden de la transacción
     */
    setOrderID(order: string): void;
    /**
     * Establece el valor de un cobro existente en la plataforma
     *
     * @param {string} uuid
     */
    setUUID(uuid: string): void;
    /**
     * Establece el valor la hora de generación de la orden.
     * Formato valido 'YYYY-MM-DD'
     *
     * @param {*} date - fecha de la orden generada
     */
    setDate(date: any): void;
    /**
     * Establece el valor de la nota descriptiva agregada al cobro
     *
     * @param {string} note
     */
    setNote(note: string): void;
    /**
     * Código ISO alpha-3 de la moneda
     *
     * @param {*} currency Ej. HNL
     */
    setCurrency(currency: any): void;
    /**
     * Establece el valor del monto a cobrar
     *
     * @param {float} amount - Monto a cobrar
     */
    setAmount(amount: float): void;
    /**
     * Establece el valor de los impuestos aplicados al cobro
     *
     * @param {float} amount - Cantidad total de impuestos
     */
    setTaxAmount(amount: float): void;
    /**
     * Categoría del pago
     *
     * @param {String} category - Nombre de la categoría
     */
    setCategory(category: string): void;
    /**
     * Establece el valor total del costo de envió del producto/servicio
     *
     * @param {float} amount - Cantidad a cobrar por el envio
     */
    setShippingAmount(amount: float): void;
    /**
     * Establece el nombre del comprador
     *
     * @param {string} name - Nombre del comprador
     */
    setFirstName(name: string): void;
    /**
     * Establece el valor del apellido(s) del comprador
     *
     * @param {string} name - Apellido(s) del comprador
     */
    setLastName(name: string): void;
    /**
     * Establece el nombre(s) y apellido(s) del comprador
     *
     * @param {string} name - Nombre(s) y apellido(s) del comprador
     */
    setFullName(name: string): void;
    /**
     * Establece el valor del email del comprador
     *
     * @param {string} email
     */
    setEmail(email: string): void;
    /**
     * Establece el nombre de la ciudad del comprador
     *
     * @param {string} value - Nombre de la ciudad
     */
    setCity(value: string): void;
    /**
     * Establece el nombre del estado del comprador
     *
     * @param {string} value - Nombre del estado
     */
    setState(value: string): void;
    /**
     * Establece el nombre del país del comprador
     *
     * @param {string} value - Nombre del país del comprador
     */
    setCountry(value: string): void;
    /**
     * Establece el código postal del comprador
     *
     * @param {string} value - Código postal
     */
    setZip(value: string): void;
    /**
     * Establce la dirección del comprador
     *
     * @param {string} value - Dirección
     */
    setAddress(value: string): void;
    /**
     * Establece las referencias de la dirección del comprador
     *
     * @param {string} value - Referencia
     */
    setReferenceAddress(value: string): void;
    /**
     * Establece la URL que se ejecutara de forma asincrónica
     * cada vez que un cobro se haya pagado con éxito
     * Ejemplo. https://midominio.com/callback
     *
     * @param {string} url - URL
     */
    setCallBack(url: string): void;
    /**
     * Establece la URL a la que el cliente será redireccioando cada vez que
     * el cliente final presione sobre el enlace "cancelar orden y regresar"
     *
     * @param {string} url - URL
     */
    setCancel(url: string): void;
    /**
     * Establece la URL a la que el usuario será redireccionado
     * cuando el cliente final haya realizado con éxito el pago.
     *
     * @param {string} url - URL
     */
    setComplete(url: string): void;
    /**
     * Verifica si el servicio de Cardinal se inicializo en la orden
     */
    evaludateCardinal(): void;
}
import Card from "./Card";
import Cardinal from "../services/Cardinal";
import Item from "./Item";
import Billing from "./Billing";
