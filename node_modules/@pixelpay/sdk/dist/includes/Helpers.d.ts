export default helper;
declare namespace helper {
    /**
     * Obtiene el texto segun la llave e idioma establecido
     *
     * @param {string} key
     * @param {object} options
     */
    function lang(key: string, options: any): any;
    /**
     * Obtiene el texto segun la llave e idioma establecido
     *
     * @param {string} key
     * @param {object} options
     */
    function lang(key: string, options: any): any;
    /**
     * Valida expresiones regulares
     *
     * @param {*} value
     * @param {string} reg
     */
    function validate(value: any, reg: string): boolean;
    /**
     * Valida expresiones regulares
     *
     * @param {*} value
     * @param {string} reg
     */
    function validate(value: any, reg: string): boolean;
    /**
     * Valida los limites de un texto
     *
     * @param {string} text
     * @param {number} min
     * @param {number} max
     * @returns {Boolean}
     */
    function validateLimit(text: string, field: any, min?: number, max?: number): boolean;
    /**
     * Valida los limites de un texto
     *
     * @param {string} text
     * @param {number} min
     * @param {number} max
     * @returns {Boolean}
     */
    function validateLimit(text: string, field: any, min?: number, max?: number): boolean;
    /**
     * Convierte y zanitiza cualquier valor a Number
     *
     * @param {number} number
     * @return {number}
     */
    function numerize(number: number): number;
    /**
     * Convierte y zanitiza cualquier valor a Number
     *
     * @param {number} number
     * @return {number}
     */
    function numerize(number: number): number;
    /**
     * Limita un texto con un definido limite de caracteres
     *
     * @param {string} text
     * @param {number} limit
     * @returns {String}
     */
    function limitText(text: string, limit?: number): string;
    /**
     * Limita un texto con un definido limite de caracteres
     *
     * @param {string} text
     * @param {number} limit
     * @returns {String}
     */
    function limitText(text: string, limit?: number): string;
    /**
     * Lanza una excepción con un mensaje personalizado
     *
     * @param {String} message
     * @return {Error}
     */
    function error(message: string, type: any, field: any): Error;
    /**
     * Lanza una excepción con un mensaje personalizado
     *
     * @param {String} message
     * @return {Error}
     */
    function error(message: string, type: any, field: any): Error;
    /**
     * Muestra un mensaje en consola
     *
     * @param {string} message
     * @param {*} data
     */
    function logger(message: string, data: any): void;
    /**
     * Muestra un mensaje en consola
     *
     * @param {string} message
     * @param {*} data
     */
    function logger(message: string, data: any): void;
    /**
     * Muestra una advertencia en consola
     *
     * @param {string} error
     * @param {*} data
     */
    function warn(error: string, data: any): void;
    /**
     * Muestra una advertencia en consola
     *
     * @param {string} error
     * @param {*} data
     */
    function warn(error: string, data: any): void;
    /**
     * Serializa un objecto a QueryString
     *
     * @param {object} obj
     * @returns {string}
     */
    function serialize(obj: any): string;
    /**
     * Serializa un objecto a QueryString
     *
     * @param {object} obj
     * @returns {string}
     */
    function serialize(obj: any): string;
    /**
     * Serializa los datos de la tarjeta.
     *
     * @param {*} data
     */
    function getDataCard(data: any): {};
    /**
     * Serializa los datos de la tarjeta.
     *
     * @param {*} data
     */
    function getDataCard(data: any): {};
    /**
     * Convierte un objecto en Json/Base64
     *
     * @param {object}
     * @returns {string}
     */
    function j64(obj: any): string;
    /**
     * Convierte un objecto en Json/Base64
     *
     * @param {object}
     * @returns {string}
     */
    function j64(obj: any): string;
    /**
     *
     * @param {object} obj
     * @returns {boolean}
     */
    function empty(obj: any): boolean;
    /**
     *
     * @param {object} obj
     * @returns {boolean}
     */
    function empty(obj: any): boolean;
}
