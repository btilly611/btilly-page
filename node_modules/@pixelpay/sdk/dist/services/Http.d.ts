export default api;
declare namespace api {
    /**
     * Validar todos los prametros de una orden
     *
     * @param {Order} Order models/Order
     * @return {Promise<Response>}
     */
    function validateInlineOrder(order: any, method: any): Promise<Response>;
    /**
     * Validar todos los prametros de una orden
     *
     * @param {Order} Order models/Order
     * @return {Promise<Response>}
     */
    function validateInlineOrder(order: any, method: any): Promise<Response>;
    /**
     * Validar todos los prametros de una orden con formato HOSTED PAYMENT
     *
     * @param {Order} Order models/Order
     * @return {Promise<Response>}
     */
    function validateOrder(order: any): Promise<Response>;
    /**
     * Validar todos los prametros de una orden con formato HOSTED PAYMENT
     *
     * @param {Order} Order models/Order
     * @return {Promise<Response>}
     */
    function validateOrder(order: any): Promise<Response>;
    /**
     * Obtiene las configuraciones de un comercio
     *
     */
    function getMerchantSettings(): Promise<any>;
    /**
     * Obtiene las configuraciones de un comercio
     *
     */
    function getMerchantSettings(): Promise<any>;
    /**
     * Retorna una respuesta del MPI Lookup
     *
     * @typedef {import('axios').AxiosResponse} AxiosResponse
     * @param {Promise<AxiosResponse<any>>} data
     */
    function getCardinalMPILookup(data: Promise<any>): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Retorna una respuesta del MPI Lookup
     *
     * @typedef {import('axios').AxiosResponse} AxiosResponse
     * @param {Promise<AxiosResponse<any>>} data
     */
    function getCardinalMPILookup(data: Promise<any>): Promise<import("axios").AxiosResponse<any>>;
    /**
     * Valida los campo de una Card y Billing para crear una tarjeta o
     * actualizarla si el campo token no está vacío
     *
     * @param {Card} card
     * @param {Billing} billing
     * @param {Alfanumérico} card_token
     * @return {Promise}
     */
    function validateCard(card: Card, billing: Billing, card_token?: Alfanumérico): Promise<any>;
    /**
     * Valida los campo de una Card y Billing para crear una tarjeta o
     * actualizarla si el campo token no está vacío
     *
     * @param {Card} card
     * @param {Billing} billing
     * @param {Alfanumérico} card_token
     * @return {Promise}
     */
    function validateCard(card: Card, billing: Billing, card_token?: Alfanumérico): Promise<any>;
    /**
     * Valida los campos para obtener la información de una tarjeta
     *
     * @param {*} token
     * @return {Promise}
     */
    function getCardInfo(token: any): Promise<any>;
    /**
     * Valida los campos para obtener la información de una tarjeta
     *
     * @param {*} token
     * @return {Promise}
     */
    function getCardInfo(token: any): Promise<any>;
    /**
     * Valida los parámetros para eliminar una  tarjeta
     *
     * @param {*} token
     * @return {Promise}
     */
    function deleteCardByToken(token: any): Promise<any>;
    /**
     * Valida los parámetros para eliminar una  tarjeta
     *
     * @param {*} token
     * @return {Promise}
     */
    function deleteCardByToken(token: any): Promise<any>;
    /**
     * Valida los parámetros para crear un usuario o obtener las tarjetas
     * asociadas a un cliente si el campo token no está vacío
     *
     * @param {*} email
     * @param {*} token
     * @return {Promise}
     */
    function validateCustomer(email: any, token?: any): Promise<any>;
    /**
     * Valida los parámetros para crear un usuario o obtener las tarjetas
     * asociadas a un cliente si el campo token no está vacío
     *
     * @param {*} email
     * @param {*} token
     * @return {Promise}
     */
    function validateCustomer(email: any, token?: any): Promise<any>;
    /**
     * Continua el proceso de autenticacion con Cardinal
     *
     * @param {Order} order
     * @param {Function} resolve
     * @param {Function} reject
     */
    function cardinalContinueProccess(order: Order, resolve: Function, reject: Function, id: any, method: any): void;
    /**
     * Continua el proceso de autenticacion con Cardinal
     *
     * @param {Order} order
     * @param {Function} resolve
     * @param {Function} reject
     */
    function cardinalContinueProccess(order: Order, resolve: Function, reject: Function, id: any, method: any): void;
    /**
     * Inicizaliza el pago de una orden
     *
     * @param {Order} order
     * @param {modal} modal
     * @returns {Promise}
     */
    function payOrder(order: Order, modal: any): Promise<any>;
    /**
     * Inicizaliza el pago de una orden
     *
     * @param {Order} order
     * @param {modal} modal
     * @returns {Promise}
     */
    function payOrder(order: Order, modal: any): Promise<any>;
    function sale(order: any, modal: any): Promise<any>;
    function sale(order: any, modal: any): Promise<any>;
    function hostedPayment(order: any, modal: any): Promise<any>;
    function hostedPayment(order: any, modal: any): Promise<any>;
    function auth(order: any): Promise<any>;
    function auth(order: any): Promise<any>;
    function capture(uuid: any, amount: any): Promise<any>;
    function capture(uuid: any, amount: any): Promise<any>;
    function inlineOrder(order: any, modal: any): Promise<any>;
    function inlineOrder(order: any, modal: any): Promise<any>;
    function validateInlineOrderPromise(order: any): Promise<Response>;
    function validateInlineOrderPromise(order: any): Promise<Response>;
    function validateAuthOrder(order: any): Promise<Response>;
    function validateAuthOrder(order: any): Promise<Response>;
    function captureTransaction(uuid: any, amount: any): Promise<Response>;
    function captureTransaction(uuid: any, amount: any): Promise<Response>;
    function proccessRequestDataForTransaction(method: any, data: any): Promise<Response>;
    function proccessRequestDataForTransaction(method: any, data: any): Promise<Response>;
    /**
     *
     * @param {Order} order
     * @param {modal} modal
     * @returns {Promise}
     */
    function processOrder(order: Order, modal: any): Promise<any>;
    /**
     *
     * @param {Order} order
     * @param {modal} modal
     * @returns {Promise}
     */
    function processOrder(order: Order, modal: any): Promise<any>;
    /**
     *
     * @param {Order} order
     * @returns {Promise}
     */
    function processInlineOrder(order: Order, modal: any, method?: string): Promise<any>;
    /**
     *
     * @param {Order} order
     * @returns {Promise}
     */
    function processInlineOrder(order: Order, modal: any, method?: string): Promise<any>;
    /**
     *
     * @param {String} url
     */
    function completeUrl(url: string): string;
    /**
     *
     * @param {String} url
     */
    function completeUrl(url: string): string;
    /**
     *
     * @param {boolean} running
     * @returns
     */
    function isRunning(): boolean;
    /**
     *
     * @param {boolean} running
     * @returns
     */
    function isRunning(): boolean;
    function clearTransaction(order: any): void;
    function clearTransaction(order: any): void;
    /**
     * Inicializa el proceso de creación o actualización de una tarjeta
     *
     * @param {Card} card
     * @param {Billing} billing
     * @param {Alfanumérico} token
     * @return {Promise}
     */
    function createCard(card: Card, billing: Billing, token?: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso de creación o actualización de una tarjeta
     *
     * @param {Card} card
     * @param {Billing} billing
     * @param {Alfanumérico} token
     * @return {Promise}
     */
    function createCard(card: Card, billing: Billing, token?: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para obtener la información de una tarjeta
     *
     * @param {Alfanumérico} token
     * @return {Promise}
     */
    function getCardMetadata(token: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para obtener la información de una tarjeta
     *
     * @param {Alfanumérico} token
     * @return {Promise}
     */
    function getCardMetadata(token: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para eliminar una tarjeta
     *
     * @param {Alfanumérico} token
     */
    function deleteCard(token: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para eliminar una tarjeta
     *
     * @param {Alfanumérico} token
     */
    function deleteCard(token: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para crear a un cliente o
     * obtener las tarjetas asociadas a el cliente
     *
     * @param {Alfanumérico} email
     * @param {Alfanumérico} token
     */
    function createCustomer(email?: Alfanumérico, token?: Alfanumérico): Promise<any>;
    /**
     * Inicializa el proceso para crear a un cliente o
     * obtener las tarjetas asociadas a el cliente
     *
     * @param {Alfanumérico} email
     * @param {Alfanumérico} token
     */
    function createCustomer(email?: Alfanumérico, token?: Alfanumérico): Promise<any>;
    /**
     * Agrega los headers necesarios para hacer peticiones
     * al servicio de tokenización
     *
     */
    function addHeaders(): void;
    /**
     * Agrega los headers necesarios para hacer peticiones
     * al servicio de tokenización
     *
     */
    function addHeaders(): void;
}
import Response from "../models/Response";
import Card from "../models/Card";
import Billing from "../models/Billing";
import Order from "../models/Order";
