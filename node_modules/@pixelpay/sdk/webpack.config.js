const webpack = require('webpack');
const autoprefixer = require("autoprefixer");

const Handlebars = require('handlebars');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const prod = process.env.NODE_ENV === 'production';
const SRC_DIR = __dirname + '/src';
const DIST_DIR = __dirname + '/dist';

module.exports = {
	entry: [
		SRC_DIR + '/pixelpay.js'
	],
	output: {
		path: DIST_DIR,
		publicPath: '/',
		filename: 'pixelpay.js',
		library: 'PixelPay',
		libraryTarget: 'umd',
		umdNamedDefine: true
	},
	module: {
		rules: [
			{
				test: /\.(png|svg|jpg|gif)$/,
				use: [
					'file-loader',
				],
			},
			{
				test: /\.(js|jsx)$/,
				exclude: /node_modules/,
				use: {
					loader: 'babel-loader'
				}
			},
			{
				test: /\.s[ac]ss$/i,
				use: [
					'style-loader',
					'css-loader',
					'postcss-loader',
					'sass-loader',
				],
			},
			{
				test: /\.(html)$/,
				exclude: /node_modules/,
				use: {
					loader: 'html-loader',
					options: {
						minimize: prod,
						preprocessor: (content, loaderContext) => {
							let result;

							try {
								result = Handlebars.compile(content)({
									isProd: prod,
								});
							} catch (error) {
								loaderContext.emitError(error);

								return content;
							}

							return result;
						},
					}
				}
			}
		]
	},
	resolve: {
		extensions: ['*', '.js', '.jsx']
	},
	plugins: [
		new webpack.HotModuleReplacementPlugin(),
		new webpack.LoaderOptionsPlugin({
			options: {
				postcss: [
					autoprefixer()
				]
			}
		}),
		new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
		new HtmlWebpackPlugin({
			template: SRC_DIR + '/index.html',
			filename: './index.html',
			inject: !prod,
		})
	],
	devServer: {
		contentBase: DIST_DIR,
		hot: true,
		port: 9001
	}
};